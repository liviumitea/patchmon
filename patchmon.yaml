###############################################################################
# Namespace
###############################################################################
apiVersion: v1
kind: Namespace
metadata:
  name: patchmon
---
###############################################################################
# Secrets – database credentials + DATABASE_URL for convenience
###############################################################################
apiVersion: v1
kind: Secret
metadata:
  name: patchmon-db-secret
  namespace: patchmon
type: Opaque
stringData:
  POSTGRES_DB: patchmon_db
  POSTGRES_USER: patchmon_user
  POSTGRES_PASSWORD: 'Password'
  # Backend uses this (service DNS + port 5432)
  DATABASE_URL: postgresql://patchmon_user:Password@patchmon-postgres:5432/patchmon_db
---
###############################################################################
# Config – shared non-secret env for backend
###############################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: patchmon-config
  namespace: patchmon
data:
  LOG_LEVEL: "info"
  SERVER_PROTOCOL: "http"
  SERVER_HOST: "0.0.0.0"
  SERVER_PORT: "3001"                  # backend listens on 3001
  CORS_ORIGIN: "http://172.16.23.39"   # matches LB
  PM_DB_CONN_MAX_ATTEMPTS: "30"
  PM_DB_CONN_WAIT_INTERVAL: "2"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX: "100"
---
###############################################################################
# Agents script – ensure /app/agents/patchmon-agent.sh exists
###############################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: patchmon-agent-script
  namespace: patchmon
data:
  patchmon-agent.sh: |
    #!/usr/bin/env sh
    # Placeholder agent script – replace with the real agent if needed.
    echo "PatchMon agent placeholder"
---
###############################################################################
# Storage – bind the existing Longhorn PV for Postgres
###############################################################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: patchmon-db-pvc
  namespace: patchmon
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi                 # ignored when binding to a pre-provisioned PV
  volumeName: patchmon-db-pv           # <-- your existing Longhorn PV name
---
###############################################################################
# Storage – agents directory (Longhorn-backed PVC; adjust size/class as needed)
###############################################################################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: patchmon-agents-pvc
  namespace: patchmon
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi
  # storageClassName: longhorn      # uncomment if you need to pin the class
---
###############################################################################
# Postgres 17-alpine (headless svc + StatefulSet)
###############################################################################
apiVersion: v1
kind: Service
metadata:
  name: patchmon-postgres
  namespace: patchmon
spec:
  clusterIP: None
  ports:
    - name: pg
      port: 5432
  selector:
    app: patchmon-postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: patchmon-postgres
  namespace: patchmon
spec:
  serviceName: patchmon-postgres
  replicas: 1
  selector:
    matchLabels:
      app: patchmon-postgres
  template:
    metadata:
      labels:
        app: patchmon-postgres
    spec:
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: postgres
          image: postgres:17-alpine
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef: { name: patchmon-db-secret, key: POSTGRES_DB }
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef: { name: patchmon-db-secret, key: POSTGRES_USER }
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef: { name: patchmon-db-secret, key: POSTGRES_PASSWORD }
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: pgdata                  # avoid lost+found; creates/uses subfolder
          livenessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: patchmon-db-pvc
---
###############################################################################
# Backend (port 3001)
###############################################################################
apiVersion: v1
kind: Service
metadata:
  name: patchmon-backend
  namespace: patchmon
spec:
  selector:
    app: patchmon-backend
  ports:
    - name: http
      port: 3001
      targetPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: patchmon-backend
  namespace: patchmon
spec:
  replicas: 1
  selector:
    matchLabels:
      app: patchmon-backend
  template:
    metadata:
      labels:
        app: patchmon-backend
    spec:
      containers:
        - name: backend
          image: ghcr.io/9technologygroup/patchmon-backend:latest
          envFrom:
            - configMapRef: { name: patchmon-config }
            - secretRef:    { name: patchmon-db-secret }
          env:
            # ensure DATABASE_URL always matches service DNS (from secret)
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: patchmon-db-secret, key: DATABASE_URL } }
          ports:
            - containerPort: 3001
          volumeMounts:
            - name: agent-files
              mountPath: /app/agents
              # If your PVC root has 'lost+found' only and you want a clean folder:
              # subPath: agents
            # Ensure the agent script exists even if the PVC already has content
            - name: agent-script
              mountPath: /app/agents/patchmon-agent.sh
              subPath: patchmon-agent.sh
          startupProbe:
            tcpSocket: { port: 3001 }
            failureThreshold: 30
            periodSeconds: 2
          readinessProbe:
            tcpSocket: { port: 3001 }
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 3001 }
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: agent-files
          persistentVolumeClaim:
            claimName: patchmon-agents-pvc
        - name: agent-script
          configMap:
            name: patchmon-agent-script
            defaultMode: 0755
---
###############################################################################
# Frontend – exposed at 172.16.23.39 (LB -> 80 -> container 3000)
###############################################################################
apiVersion: v1
kind: Service
metadata:
  name: patchmon-frontend
  namespace: patchmon
spec:
  type: LoadBalancer
  loadBalancerIP: 172.16.23.39
  selector:
    app: patchmon-frontend
  ports:
    - name: http
      port: 80
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: patchmon-frontend
  namespace: patchmon
spec:
  replicas: 1
  selector:
    matchLabels:
      app: patchmon-frontend
  template:
    metadata:
      labels:
        app: patchmon-frontend
    spec:
      containers:
        - name: frontend
          image: ghcr.io/9technologygroup/patchmon-frontend:latest
          ports:
            - containerPort: 3000
          readinessProbe:
            tcpSocket: { port: 3000 }
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 3000 }
            initialDelaySeconds: 10
            periodSeconds: 10
